---
import SunIcon from "./icons/Sun.astro"
import MoonIcon from "./icons/Moon.astro"
---

<div class="relative ml-1 mr-1">
  <button
    transition:persist
    id="theme-toggle-btn"
    class="appearance-none border-none flex hover:scale-110 transition-transform duration-200 p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 relative"
    aria-label="Toggle theme"
  >
    <span class="sr-only">Toggle between light and dark theme</span>
    <!-- Switch between sun and moon -->
    <div class="relative w-5 h-5">
      <SunIcon id="light" class="theme-toggle-icon absolute inset-0 w-5 h-5 transition-all duration-300 text-yellow-500" />
      <MoonIcon id="dark" class="theme-toggle-icon absolute inset-0 w-5 h-5 transition-all duration-300 text-blue-400" />
    </div>
  </button>
</div>

<style>
  .theme-toggle-icon {
    transform: scale(0);
    opacity: 0;
  }

  .theme-toggle-icon.active {
    transform: scale(1);
    opacity: 1;
  }
</style>

<script is:inline>
  const mediaQuery = window.matchMedia("(prefers-color-scheme: dark)")
  
  const getCurrentTheme = () => {
    const savedTheme = localStorage.getItem("theme")
    
    if (!savedTheme) {
      return mediaQuery.matches ? "dark" : "light"
    }
    
    return savedTheme
  }

  const updateIcons = (theme) => {
    const lightIcon = document.querySelector("#light")
    const darkIcon = document.querySelector("#dark")
    
    if (lightIcon && darkIcon) {
      lightIcon.classList.remove("active")
      darkIcon.classList.remove("active")
      
      lightIcon.style.transform = theme === "light" ? "scale(1)" : "scale(0)"
      lightIcon.style.opacity = theme === "light" ? "1" : "0"
      
      darkIcon.style.transform = theme === "dark" ? "scale(1)" : "scale(0)"
      darkIcon.style.opacity = theme === "dark" ? "1" : "0"
    }
  }

  const applyTheme = (theme) => {
    document.documentElement.classList.toggle("dark", theme === "dark")
    updateIcons(theme)
  }

  const toggleTheme = () => {
    const currentTheme = getCurrentTheme()
    const newTheme = currentTheme === "light" ? "dark" : "light"
    
    localStorage.setItem("theme", newTheme)
    applyTheme(newTheme)
  }

  const initializeTheme = () => {
    const theme = getCurrentTheme()
    applyTheme(theme)
    
    requestAnimationFrame(() => {
      document.documentElement.style.opacity = "1"
    })
  }

  const handleSystemThemeChange = () => {
    if (!localStorage.getItem("theme")) {
      const systemTheme = mediaQuery.matches ? "dark" : "light"
      applyTheme(systemTheme)
    }
  }

  mediaQuery.addEventListener("change", handleSystemThemeChange)

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initializeTheme)
  } else {
    initializeTheme()
  }

  document.getElementById("theme-toggle-btn")?.addEventListener("click", toggleTheme)

  document.addEventListener('astro:after-swap', () => {
    initializeTheme()
    document.getElementById("theme-toggle-btn")?.addEventListener("click", toggleTheme)
  })
</script>
